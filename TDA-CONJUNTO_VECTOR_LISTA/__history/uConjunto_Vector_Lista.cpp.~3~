//---------------------------------------------------------------------------
#pragma hdrstop
#include "uConjunto_Vector_Lista.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

ConjuntoV::ConjuntoV() {
	//elem = new ListaV;
}

bool ConjuntoV::EsVacio() {
	return (elem.LongitudLista() == 0);
}

bool ConjuntoV::pertenece(int elemento) {
	if (!elem.EsVacio()) {
		direccion p = elem.primero();
		while (p != NULO) {
			int ele = elem.recupera(p);
			if (elemento == ele)
				return true;
			else
				p = elem.siguiente(p);
        }
		return false;
	} else {
		ShowMessage("Error!. El conjunto C no tiene elementos"); return false;
	}
}

void ConjuntoV::inserta(int elemento) {
	if (!pertenece(elemento))
		elem.inserta(elem.primero(), elemento);
}

int ConjuntoV::cardinal() {
	return elem.LongitudLista();
}

int ConjuntoV::ordinal(int elemento) {
	if (!elem.EsVacio()) {
		int cont = 0;
		direccion p = elem.primero();
		while (p != NULO) {
			cont++;
			int ele = elem.recupera(p);
			if (elemento == ele)
				return cont;
			else
				p = elem.siguiente(p);
        }
	} else {
		ShowMessage("Error!. El conjunto C no tiene elementos");
    }
}

void ConjuntoV::suprime(int elemento) {
	if (pertenece(elemento)) {
		direccion dir = NULO;
		direccion p = elem.primero();
		while (p != NULO) {
			int ele = elem.recupera(p);
			if (elemento == ele) {
				dir = p;
				p = NULO;
			} else
				p = elem.siguiente(p);
		}

		if (dir != NULO)
			elem.suprime(dir);
	} else {
		ShowMessage("Error!. El conjunto C no tiene dicho elemento o no tiene elementos!");
	}
}

int ConjuntoV::obtenerNumeroAleatorio(int min, int max) {
	return rand() % (max - min + 1) + min;
}

int ConjuntoV::muestrea() {
	int lug = obtenerNumeroAleatorio(1, elem.LongitudLista());
	direccion dir = elem.primero();
	direccion dirElem = NULO;
	int cont = 0;
	for (int i = 0; i < elem.LongitudLista(); i++) {
		cont = cont + 1;
		if (cont == lug)
			dirElem = dir;
		else
			dir = elem.siguiente(dir);
	}
    return elem.recupera(dirElem);
}