//---------------------------------------------------------------------------
#pragma hdrstop
#include "uPolinomio_Vector_Lista.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

PolinomioVL::PolinomioVL() {
	this->nt = 0;
}

direccion PolinomioVL::BuscarExponente(int exp) {
	direccion dir = pol.siguiente(pol.primero());
	if (dir != NULO) {
		direccion dirExp = NULO;
		while (dir != NULO && dirExp == NULO) {
			if (pol.recupera(dir) == exp) {
				dirExp = dir;
				dir = NULO;
			} else
				dir = pol.siguiente(pol.siguiente(dir));
		}
		return dirExp;
	} else {
		ShowMessage("Error!. El polinomio no tiene terminos!"); return NULO;
    }
}

direccion PolinomioVL::BuscarTerminoN(int i) {
	direccion dir = pol.primero();
	int numTer = 0;
	if (dir != NULO) {
		direccion dirExp = NULO;
		while (dir != NULO && dirExp == NULO) {
			numTer++;
			if (numTer == i) {
				dirExp = dir;
				dir = NULO;
			} else
				dir = pol.siguiente(pol.siguiente(dir));
        }
		return dirExp;
	} else {
		ShowMessage("Error!. El polinomio no tiene terminos!"); return NULO;
	}
}

bool PolinomioVL::EsCero() {
	return (pol.LongitudLista() == 0);
}

int PolinomioVL::Grado() {
	direccion dir = pol.siguiente(pol.primero());
	if (dir != NULO) {
		int MaxG = pol.recupera(dir);
		while (dir != NULO) {
			if (pol.recupera(dir) > MaxG) {
				MaxG = pol.recupera(dir);
			} //No poner else
			dir = pol.siguiente(pol.siguiente(dir));
		}
		return MaxG;
	} else {
		ShowMessage("Error!. El polinomio no tiene terminos!"); return NULO;
	}
}

int PolinomioVL::coeficiente(int exp) {
	direccion dir = BuscarExponente(exp);
	if (dir != NULO) {
		return pol.recupera(pol.anterior(dir));
	} else {
		ShowMessage("Error!. El polinomio no tiene terminos!"); return NULO;
    }
}

void PolinomioVL::AsignarCoeficiente(int coef, int exp) {
	direccion dir = BuscarExponente(exp);
	if (dir != NULO) {
		direccion dirCoef = pol.anterior(dir);
		pol.modifica(dirCoef, coef);
		if (coef == 0) {
			pol.suprime(dir);
			pol.suprime(dirCoef);
		}
	} else {
		ShowMessage("Error!. El polinomio no tiene ese terminos!");
    }
}

int PolinomioVL::numero_terminos() {
	return (pol.LongitudLista() / 2);
}

int PolinomioVL::exponente(int nroter) {
	direccion dir = BuscarTerminoN(nroter);
	if (dir != NULO) {
		return pol.recupera(pol.siguiente(dir));
	} else {
		ShowMessage("Error!. El polinomio no tiene terminos!"); return NULO;
    }
}
