//---------------------------------------------------------------------------

#pragma hdrstop

#include "Unidad1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
	CSmemoria::CSmemoria(){
	 mem = new Nodo[MAX];
	 for (int i = 0; i < MAX; i++) {
	   mem[i].link = i+1;
	   mem[i].dato=0;
	 }
	 mem[MAX - 1].link=-1;
	 libre=0;
	}

	int Num_ids(string cadena){
	int cant=0;
	for (int i = 0; i < cadena.length(); i++) {
	  if (cadena[i]==',') {
		 cant++;
	  }
	}
	if (!cadena.empty()) {
	  cant+=1;
	} else {
		cant+=0;
	}
	return cant;
	}

		string ObtID(string cadena, int n){
	 string palabra="";
	 int contador=0;
	 int i=0;
	 while ((contador<n-1) && (i<cadena.length()))
	 { if (cadena.at(i)==',') {
		   contador++;
		   cadena=cadena.substr(i+1,cadena.length()-cadena.substr(0,i).length());
		   i=-1;
	   }
	   i++;
	 }
	 i=0;
	 while (cadena[i]!=',' && i<cadena.length())
	 {
	 i++;
	 }
	 palabra=cadena.substr(0,i);
	 return palabra;
	}

    void eliminarflecha(string &cadena){
	int pos=0;
		if (cadena!="") {
		  while (cadena[pos]!='-' && cadena[pos+1]!='>')
			  {
				pos++;
			  }
		  cadena=cadena.substr(pos+2,cadena.length()-cadena.substr(0,pos+1).length());
		}

	}

	int CSmemoria::new_espacio(string cadena){
	int cant = Num_ids(string cadena);
	int dire=libre, d=libre;
		for (int i = 1; i <= cant -1 ; i++) {
			mem[].id=ObtID(cadena,i);
			d=mem[d].link;
		}
		libre=mem[d].link;
		mem[d].link=-1;
		mem[d].id=ObtID(cadena,cant);
		return dire;
	}

		void CSmemoria::Delete_espacio(int dire){  // si pide dejar en la memoria al eliminar
	int x = dire;                              //comemtar las lineas que dice que hace
	while (mem[x].link != -1)
		{  // mem[x].id="";    //borra el id de la memoria
			//mem[x].dato=0;   // pone en 0 el dato
		x=mem[x].link;
		}
	   // mem[x].id="";   // borra el id
	   //	mem[x].dato=0; //pone en 0
	mem[x].link=libre;
	libre=dir;
	}

    	int CSmemoria::Espacio_Disponible(){
	// Cantidad de memoria disponible
	int x = libre;
	int c = 0; // CONTADOR
	while (x != -1)
	{
	c++;
	x=mem[x].link;
	}
	// RETORNAR C
	return c;
	}
	int CSmemoria::Espacio_ocupado(){
	return MAX - Espacio_Disponible();
	}

	bool CSmemoria::dir_libre(int dir){
	int x =libre;
	bool c=false;
		while ((x!= NULO) && (c==false)){
		if (x==dir) {
			c=true;
		}
		x=mem[x].link;
		}
	 return c;
	}

    	void CSmemoria::poner_dato(int dir, string id, int valor){
	int z=dir;
	eliminarflecha(id);
		while (z!=NULO){
		if (mem[z].id==id) {
			mem[z].dato=valor;
		}
		z=mem[z].link;
		}

	}

    	int CSmemoria::obtenerDato(int dir, string id){
	int z=dir;
	bool ex=false;
	eliminarflecha(id);
	while (z!=NULO){
	if (mem[z].id==id) {
	 return mem[z].dato;
	}
	z=mem[z].link;
	}
	}
