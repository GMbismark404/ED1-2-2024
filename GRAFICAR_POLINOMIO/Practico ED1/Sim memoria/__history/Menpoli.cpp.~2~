//---------------------------------------------------------------------------

#pragma hdrstop

#include "Menpoli.h"
#include "UnIMEM.h"
#include <vcl.h>
#include <iostream>
//---------------------------------------------------------------------------
#pragma package(smart_init)

	direccion polimem::BExp(int Exp){
		direccion dir = this->ptr;
	if (dir != NULO) {
		direccion dirEx = NULO;
		while (dir != NULO && dirEx == NULO) {
			if (Cm->obtenerDato(dir, "->exp") == Exp) {
				dirEx = dir;
			}
			dir = Cm->obtenerDato(dir, "->sig");
		}
		return dirEx;
	} else {
		ShowMessage("No existe ese termino!");
		return NULO;
	}
	}

	direccion polimem::BTer(int I){
		direccion dir = this->ptr;
	if (dir != NULO) {
		direccion dirTer = NULO;
		Nt = 0;
		while (dir != NULO && dirTer == NULO) {
			Nt++;
			if (Nt == I) {
				dirTer = dir;
			}
			dir = Cm->obtenerDato(dir, "->sig");
        }
		return dirTer;
	} else {
		ShowMessage("No existe terminos!");
        return NULO;
	}
	}

	/*polimem::polimem(){
		Nt=0;
		ptr=NULO;
		Cm= new CSmemoria();
	} */

	polimem::polimem(CSmemoria* m){
		Nt=0;
		ptr=NULO;
		Cm=m;
	}

	bool polimem::EsCero(){
		return (Nt==0);
	}

	int polimem::Grado(){
		direccion dir = this->ptr;
	if (dir != NULO) {
		int MaxG = Cm->obtenerDato(dir, "->exp");
		while (dir != NULO) {
			if (Cm->obtenerDato(dir, "->exp") > MaxG) {
				MaxG = Cm->obtenerDato(dir, "->exp");
			}
			dir = Cm->obtenerDato(dir, "->sig");
		}
		return MaxG;
	} else {
		ShowMessage("No existe ese termino!");
		return NULO;
	}
	}

	int polimem::coef(int Exp){
	direccion dir = BExp(Exp);
	if (dir != NULO) {
		return Cm->obtenerDato(dir, "->coef");
	} else {
		ShowMessage("No existe ese termino!");
	}
	}

	void polimem::Ascoef(int coef,int exp){
	direccion dir = BTer(coef);
	if (dir != NULO) {
		Cm->poner_dato(dir, "->coef", coef);
		if (coef == 0) {
			Cm->Delete_espacio(dir);
		}
	} else {
		ShowMessage("No existe ese termino!");
	}
	}

	int polimem::Poterm(int coef,int exp){
	direccion existe = BExp(exp);
	if (existe == NULO) {
		direccion nuevoNodo = Cm->new_espacio("coef,exp,sig");
		if (nuevoNodo != NULO) {
			Cm->poner_dato(nuevoNodo, "->coef", coef);
			Cm->poner_dato(nuevoNodo, "->exp", exp);
			Cm->poner_dato(nuevoNodo, "->sig", ptr);
			ptr = nuevoNodo;
			Nt++;
		} else {
			ShowMessage("Error espacio de memoria!");
		}
	} else {
		int nuevoCoef = Cm->obtenerDato(existe, "->coef") + coef;
		Cm->poner_dato(existe, "->coef", nuevoCoef);
		if (nuevoCoef == 0) {
			Cm->Delete_espacio(existe);
		}
	}
	}

	int polimem::Nterm(){
		return Nt;
	}

	int polimem::exp(int nroter){
		direccion dir = BTer(nroter);
	if (dir != NULO) {
		return Cm->obtenerDato(dir, "->exp");
	} else {
		ShowMessage("No existe ese termino!");
        return NULO;
	}
	}

	void polimem::derivar(polimem *p,polimem *p1){
	for (int i = 1; i <= p->Nterm(); i++) {
		int ex = p->exp(i);
		int co = p->coef(ex);
		p1->Poterm(co*ex, ex-1);
	}
	}
