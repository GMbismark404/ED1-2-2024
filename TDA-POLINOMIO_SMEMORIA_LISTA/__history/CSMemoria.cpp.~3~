//---------------------------------------------------------------------------
#pragma hdrstop
#include "CSMemoria.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

CSMemoria::CSMemoria()
{
	mem = new NodoM[MAX];
	for (int i = 0; i < MAX - 1; i++) {
		mem[i].link = i + 1;
		mem[i].id= " ";
	}
	mem[MAX - 1].link = NULO;
	mem[MAX - 1].id= " ";
	this->libre = 0;
}

int CSMemoria::new_espacio(AnsiString cad) { // añade los ids y devuelve una direccion
	int cant = numero_ids(cad);         // cad = "ci,fono,edad" -> 3
	int dir = libre;
	int d = libre;
	for (int i = 0; i < cant - 1; i++) {
		mem[d].id = obtener_id(cad,i);
		d = mem[d].link;
	}

	libre = mem[d].link;
	mem[d].link = -1;
	mem[d].id = obtener_id(cad, cant - 1);
return dir;
}

void CSMemoria::delete_espacio(direccion dir) {
	direccion x = dir;
	while (mem[x].link != NULO) {
		x = mem[x].link;
	}
	mem[x].link = libre;
	libre = dir;
}

void CSMemoria::poner_dato(direccion dir, AnsiString cadena_id, int valor) {
	direccion z = dir;
	eliminar_flecha(cadena_id);
	while (z != NULO) {
		if (mem[z].id == cadena_id) {
			mem[z].dato = valor;
		}
		z = mem[z].link;
	}
}

int CSMemoria::obtener_dato(direccion dir, AnsiString cadena_id) {
	direccion z = dir; bool ex = false;
	eliminar_flecha(cadena_id);
	while (z != NULO) {
		if (mem[z].id == cadena_id) {
			return mem[z].dato;
		}
		z = mem[z].link;
	}
}

int CSMemoria::espacio_disponible() {
int contador = 0;
	for (direccion x = libre; (x < MAX) && (x != NULO) ; x = mem[x].link) {
		contador++;
	}
return contador;
}

int CSMemoria::espacio_ocupado() {
	return MAX - espacio_disponible();
}

bool CSMemoria::dir_libre(direccion dir)
{
	direccion x = libre; bool c = false;
	while (x != NULO && c == false) {
		if (x == dir) {
			c = true;
		}
		x = mem[x].link;
	}
    return c;
}